#ifndef lint
static const char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20130304

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)

#define YYPREFIX "yy"

#define YYPURE 0

#line 2 "scanner.y"
#include <string.h>
#include <stdio.h>
#ifndef YYSTYPE
#define YYSTYPE int
#endif
extern int linenum;
extern char* yytext;
void yyerror(char*);
#line 28 "y.tab.c"

#ifndef YYSTYPE
typedef int YYSTYPE;
#endif

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define SPECIAL 257
#define INLINE 258
#define DO 259
#define FOR 260
#define WHILE 261
#define BREAK 262
#define CONTINUE 263
#define GOTO 264
#define RETURN 265
#define IF 266
#define ELSE 267
#define SWITCH 268
#define ENUM 269
#define CASE 270
#define DEFAULT 271
#define STATIC 272
#define SIZEOF 273
#define type_qualifier 274
#define storage_class_specifier 275
#define type_specifier 276
#define struct_or_union 277
#define identifier 278
#define const_int 279
#define const_char 280
#define const_float 281
#define string_literal 282
#define ellipsis 283
#define op_assign 284
#define op_and 285
#define op_or 286
#define op_eq 287
#define op_ne 288
#define op_le 289
#define op_ge 290
#define op_lshift 291
#define op_rshift 292
#define op_ptr 293
#define op_pp 294
#define op_dd 295
#define YYERRCODE 256
static const short yylhs[] = {                           -1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    4,    4,    8,    8,    8,
    8,    8,    8,    9,    9,    9,    9,    9,    9,   10,
   10,   11,   11,   11,   11,   12,   12,   12,   13,   13,
   13,   14,   14,   14,   14,   14,   15,   15,   15,   16,
   16,   17,   17,   18,   18,   19,   19,   20,   20,   21,
   21,    7,    7,    2,    2,   22,   23,   23,   24,   24,
   24,   24,   24,   24,   24,   24,   25,   25,   29,   29,
   26,   26,   27,   27,   27,   27,   32,   32,   32,   35,
   35,   36,   37,   37,   37,   37,   38,   38,   40,   40,
   40,   33,   33,   33,   33,   33,   41,   41,   42,   42,
   43,   39,   28,   30,   30,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   45,
   45,   45,   45,   46,   46,   47,   47,   49,   49,   50,
   50,   50,   48,   48,    5,    5,   51,   51,   51,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   34,   31,   31,   31,    6,    6,    6,    6,   53,   54,
   54,   55,   55,   56,   56,   56,   56,   56,   56,   57,
   57,   57,   58,   58,   63,   63,   64,   64,   59,   59,
   60,   60,   60,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   62,   62,   62,
   62,   62,    0,    0,   65,   65,   66,   66,   67,   67,
};
static const short yylen[] = {                            2,
    1,    1,    1,    1,    1,    3,    1,    4,    4,    3,
    3,    2,    2,    6,    7,    1,    3,    1,    2,    2,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    4,    1,    3,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    5,    1,    3,    1,    3,    1,    2,    3,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    3,    1,    3,
    1,    1,    1,    1,    1,    1,    4,    5,    2,    1,
    2,    3,    1,    2,    1,    2,    1,    3,    1,    2,
    3,    4,    5,    5,    6,    2,    1,    3,    1,    3,
    1,    1,    1,    1,    2,    1,    3,    3,    4,    4,
    5,    5,    6,    6,    4,    5,    4,    3,    4,    1,
    2,    2,    3,    1,    2,    1,    3,    1,    3,    2,
    1,    2,    1,    3,    1,    2,    1,    1,    2,    3,
    2,    3,    3,    3,    4,    4,    4,    5,    4,    5,
    5,    6,    5,    6,    3,    4,    2,    3,    3,    4,
    1,    1,    3,    4,    1,    2,    3,    4,    2,    1,
    2,    3,    2,    1,    1,    1,    1,    1,    1,    3,
    4,    3,    2,    3,    1,    2,    1,    1,    1,    2,
    5,    7,    5,    5,    7,    4,    7,    7,    7,    8,
    8,    8,    9,    6,    7,    7,    8,    3,    2,    2,
    2,    3,    1,    2,    1,    1,    3,    4,    1,    2,
};
static const short yydefred[] = {                         0,
  113,    0,   81,    0,   82,   83,    0,  171,    0,  226,
    0,    0,    0,    0,   84,   85,   86,  223,  225,    0,
    0,   74,    0,    0,  224,  116,    0,    0,   67,    0,
   77,    0,    0,    0,   70,   72,   76,    0,  111,    0,
  107,    0,    0,  112,    0,    0,   90,    0,    0,    0,
  134,  132,    0,    0,   68,    0,    0,  229,    0,  227,
    0,    0,    0,    0,    0,  102,    0,    0,    0,   94,
   87,   91,    0,    0,    0,   97,   96,  117,  135,  133,
   78,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    0,    0,  193,   24,   25,   26,   27,   28,   29,  199,
    7,    0,    0,   64,    0,    0,   32,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,  197,  198,
  184,  185,  186,  187,  188,  189,    0,  195,    1,    0,
  172,   80,  230,  228,    0,  128,    0,    0,    0,    0,
  138,    0,  118,    0,    0,    0,  103,    0,  104,  108,
   30,   66,  110,   88,  100,    0,    0,   92,    0,    0,
    0,    0,  220,  219,    0,  221,    0,    0,    0,    0,
    0,    0,   22,    0,    0,   19,   20,    0,    0,    0,
    0,    0,  200,    0,   12,   13,    0,    0,    0,    0,
   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,  196,    0,    0,    0,  175,    0,    0,  180,    0,
    0,  140,    0,  142,    0,  127,  129,    0,    0,    0,
    0,  125,  120,    0,  119,    0,    0,  105,  101,   98,
    0,    0,    0,    0,    0,    0,  218,  222,    0,    0,
    0,  192,    0,  190,    0,    6,    0,    0,    0,  146,
   65,   11,    0,   16,    0,   10,   63,   33,   34,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  183,  173,    0,
  176,  179,  181,    0,  167,    0,    0,    0,  151,    0,
    0,    0,    0,    0,    0,  144,  137,  139,  122,    0,
    0,  126,  121,    0,  206,    0,    0,    0,    0,    0,
    0,    0,    0,  191,    0,    0,    0,   31,    9,    0,
    8,    0,  182,  174,  177,    0,  169,  150,    0,    0,
  165,  154,    0,  153,    0,  168,    0,    0,  152,    0,
    0,    0,  123,  124,    0,    0,    0,    0,    0,    0,
    0,    0,  204,    0,  203,    0,   17,   61,  178,  159,
    0,    0,  157,  170,    0,    0,  166,  156,    0,  155,
    0,    0,    0,    0,    0,    0,    0,    0,  214,    0,
    0,    0,    0,   14,    0,  161,  163,  160,    0,    0,
  158,  205,  209,  208,    0,  207,    0,    0,    0,  216,
  215,    0,  202,   15,  162,  164,  212,  211,  210,    0,
  217,  213,
};
static const short yydgoto[] = {                          9,
  111,  112,  113,  273,  190,  225,  114,  115,  116,  117,
  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
  128,  163,   10,   59,   30,   12,   13,   14,   31,   50,
  226,   15,   16,   17,   46,   47,   48,   75,   49,   76,
   40,   41,   42,   33,   34,   53,  306,  149,  150,  151,
  307,  235,  227,  228,  229,  130,  131,  132,  133,  134,
  135,  136,  137,  138,   18,   19,   61,
};
static const short yysindex[] = {                       716,
    0, -106,    0,  716,    0,    0,  -81,    0,  716,    0,
   -6,  716,  716,  716,    0,    0,    0,    0,    0,  -85,
 -226,    0,  -58,  152,    0,    0,   19,  -34,    0,   24,
    0,  550,    6,  -19,    0,    0,    0, -226,    0,  -25,
    0,   34,  152,    0,  152,  -48,    0,   -1,  152,   32,
    0,    0,  -34,   19,    0,  124,  874,    0,   -6,    0,
  606,  287,  669,    6,  -13,    0, -103, 1312,   99,    0,
    0,    0, 1312,   71,  104,    0,    0,    0,    0,    0,
    0,   43,  471,  115,  121,  106,  119,  -96,  928,  191,
  199, 1312,  194, 1330,  213,    0,    0,    0,    0, 1341,
 1341,  169,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  135,  -20,    0,    5, 1312,    0,  206,   48,  -91,
   12,   27,  240,  197,  183,    8,  -51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  310,    0,    0,  767,
    0,    0,    0,    0,    0,    0,   20,  268,  108,  269,
    0,  892,    0,  228,  236,  778,    0,  -97,    0,    0,
    0,    0,    0,    0,    0, 1312,   -1,    0,  213,   70,
  498, 1312,    0,    0,  281,    0,  140, 1312, 1312,  298,
  471,  169,    0,  471,  169,    0,    0,    0,  112,  304,
   16, 1312,    0,   85,    0,    0, 1312, 1312,   92, 1312,
    0, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
    0,    0, 1312,   94,  -11,    0,  874,   35,    0, 1084,
  796,    0,  -36,    0,   36,    0,    0,  100, 2134,  319,
  892,    0,    0, 1312,    0,  339,  346,    0,    0,    0,
  340,  471,  939,  145,  966,  241,    0,    0,  282,  303,
  471,    0,  350,    0,  403,    0,  977, 2169,   39,    0,
    0,    0,  330,    0,   44,    0,    0,    0,    0,    0,
  206,  206,   48,   48,  -91,  -91,  -91,  -91,   12,   12,
   27,  240,  197,  183,    8,  101,  364,    0,    0,  509,
    0,    0,    0,    0,    0,  425,  450,  892,    0,  399,
  405,  807,   36,  446,  834,    0,    0,    0,    0,  409,
  413,    0,    0, 1312,    0, 1312,  151,  996, 1155,  161,
  471,  471,  471,    0,  300,  300,  767,    0,    0, 1312,
    0, 1312,    0,    0,    0,  874,    0,    0,  417,  892,
    0,    0, 1312,    0,  422,    0,  455,  892,    0,  436,
  440,  863,    0,    0,  372,  373, 1254, 1265,  164,  471,
  421, 1283,    0,  250,    0,   -7,    0,    0,    0,    0,
  442,  460,    0,    0,  465,  892,    0,    0, 1312,    0,
  467,  487,  471,  471,  478,  471,  482, 1294,    0,  471,
  471,  483,  471,    0,  575,    0,    0,    0,  508,  510,
    0,    0,    0,    0,  471,    0,  471,  471,  484,    0,
    0,  471,    0,    0,    0,    0,    0,    0,    0,  471,
    0,    0,
};
static const short yyrindex[] = {                         0,
    0,    0,    0,  320,    0,    0,    0,    0,    0,    0,
    0,  453,  459,  972,    0,    0,    0,    0,    0, 2309,
    0,    0, 2330,    0,    0,    0,    0,    3,    0,    0,
    0,  192, 2282,    0,    0,    0,    0,    0,    0,    0,
    0,   22,    0,    0,  705,    0,    0,    0,  744,    0,
    0,    0,   10,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2343,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,  192,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1459,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1718,    0, 1786,    0,    0, 1757,  396, 2021,
 2191, 1388, 1891,   26,  175,   81,  578,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1136,    0,  493,    0,    0,  507,
    0,    0,    0, 1359,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1605,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1417,    0,    0,
  536,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  552,    0,  554,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1359,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1814, 1871, 1899, 1928, 2049, 2072, 2109, 2163, 2200, 2207,
 1430, 2220, 1843, 2289,  634,    0,    0,    0,    0,    0,
    0,    0,    0, 2255,    0,    0,    0,    0,    0, 1359,
    0,    0,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1745,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1359,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  382,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
static const short yygindex[] = {                         0,
    0,  -62,    0,    0,  424,  275,  -54,  265,    0,  -71,
  247,  278,  198,  353,  401,  398,  406,  407,  408,    0,
  -63,   14,  166,    2,    0,    0,  842,    0,  572,   21,
  -56,    0,    0,    0,  585,   46,   33,    0,  -28,  462,
  592,  -37,    0,  -16,   -5,  -39,  -49,    0,    0,  392,
  -57, -170, -251,    0,  410,  -76,    0,  109,    0,    0,
    0,    0,    0,  496,  630,    0,    0,
};
#define YYTABLESIZE 2621
static const short yytable[] = {                         51,
  142,   11,  141,  230,  162,   22,  170,   28,  155,  162,
   11,  220,  148,   35,   36,   37,   21,   64,   67,  197,
   27,  159,   52,  156,   79,  199,  177,  248,  162,  160,
  158,   32,  300,   27,   51,   28,  405,   38,   27,  189,
   28,   24,  130,  130,  201,   62,  130,   80,  346,  131,
  131,   39,   29,  131,  231,  268,   73,   28,   27,  230,
   28,   28,  313,  147,   43,  109,   54,   54,   74,   54,
  198,  211,   78,  212,   82,  314,   71,   70,  268,   82,
  224,   77,   55,   54,   54,  141,  165,  192,   54,  234,
  205,   72,  206,  130,   68,  302,   63,  240,  313,   66,
  131,  247,  162,   57,  262,  180,  231,  264,  254,  256,
  231,  157,  241,  299,   72,  259,  260,  404,   54,  189,
  160,   58,  189,   51,   58,  223,  315,   79,  166,  231,
  278,  279,  280,  270,  191,  275,  341,  271,   58,   58,
   60,  233,  274,   58,  192,  277,  109,  167,  237,   54,
   54,  238,  266,  346,  171,  192,  109,  296,  342,  162,
  172,  104,  168,  102,  173,  105,  106,  232,  107,  144,
  301,   20,  141,   58,   39,  325,  311,  174,  192,  249,
   39,  175,  110,  192,  334,  269,  320,   74,  192,  321,
  327,  312,  330,  193,  192,  338,   23,   58,  258,  207,
  208,  109,   51,  328,  192,   58,  104,  192,  102,  367,
  105,  106,   79,  107,  191,   56,   64,  191,   56,  372,
    2,  129,  398,  164,  233,   44,  143,    6,    7,    8,
  178,  147,   56,   56,  219,   79,  297,   56,  179,   44,
  147,   26,  204,  345,   99,  141,   56,  202,  103,  108,
   79,  181,  203,  349,  373,  374,  375,  355,   26,   99,
  361,  365,  269,  366,  357,  369,  371,   56,  350,  147,
  184,   26,  194,  195,  196,  362,   26,  215,  378,   51,
  130,  331,  141,   79,  192,  377,   51,  131,  200,  379,
  216,  141,  218,  399,  108,  381,   26,   26,  382,   56,
  209,  210,  129,  385,  395,  397,  217,  391,  236,  402,
   54,   54,  239,  213,  214,  147,  413,  414,  386,  416,
  242,   79,  332,  420,  421,  192,  423,  146,  243,   51,
  251,  409,  161,   79,  410,  419,  255,  161,  427,  257,
  428,  429,  109,  333,  267,  431,  192,  104,  345,  102,
  141,  105,  106,  432,  107,  261,  161,   79,  183,   73,
   73,   73,  272,   73,  186,  187,   58,    2,  110,  276,
  339,  298,   44,  340,    6,    7,    8,  316,   73,  324,
  161,    1,   83,   84,   85,   86,   87,   88,   89,   90,
  335,   91,    2,   92,   93,    3,   94,    4,    5,    6,
    7,   95,   96,   97,   98,   99,  285,  286,  287,  288,
   73,  319,  392,  393,  201,  192,  192,  100,  101,  201,
    2,  201,  337,  201,  201,   44,  201,    6,    7,    8,
  161,  322,   56,   39,  221,  108,   39,    2,  323,   39,
  201,   94,   44,  336,    6,    7,  188,   96,   97,   98,
   99,  281,  282,   39,   39,   39,  343,   39,   39,   56,
   56,  400,  100,  101,  192,  347,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  283,  284,  356,  161,   39,   39,
  348,  351,   69,   69,   69,  384,   69,  352,   71,   71,
   71,  363,   71,  109,  201,  364,  201,  201,  104,  380,
  102,   69,  105,  106,  383,  107,  403,   71,  415,   39,
   39,  192,  417,  422,  430,  192,  192,  192,  387,  110,
  109,  161,  388,  141,  406,  104,  141,  102,  252,  105,
  106,  109,  107,   69,    1,  412,  104,  136,  102,   71,
  105,  106,  407,  107,  224,    2,  253,  408,    3,  411,
    4,    5,    6,    7,  145,  289,  290,    1,   83,   84,
   85,   86,   87,   88,   89,   90,  145,   91,    2,   92,
   93,    3,   94,    4,    5,    6,    7,   95,   96,   97,
   98,   99,  147,   56,  148,  147,  108,  148,  149,  223,
  425,  149,  426,  100,  101,  263,  161,  109,  265,  147,
   57,  376,  104,  292,  102,  291,  105,  106,   60,  107,
  224,   60,  293,  108,  294,   81,  295,   69,  250,   65,
  318,  140,  222,  344,  108,   60,   60,  303,   25,  201,
  201,  201,  201,  201,  201,  201,  201,  201,    0,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,    0,  223,    0,    0,    0,    0,
   60,    0,   56,    0,   59,  201,  201,   59,    0,    0,
   39,   39,   39,   39,   39,   39,   39,   39,    0,    0,
    0,   59,   59,    0,    0,    0,   59,  140,    0,  424,
  108,  109,   60,    1,    0,    0,  104,    0,  102,    0,
  154,  106,    0,  107,    2,    0,    0,    3,    0,    4,
    5,    6,    7,    8,    0,    0,   59,    0,   56,   83,
   84,   85,   86,   87,   88,   89,   90,    0,   91,    0,
   92,   93,    0,   94,   93,   93,   93,    0,  169,   96,
   97,   98,   99,    0,    0,    1,    0,    0,   59,    0,
    0,  153,   93,    0,  100,  101,    2,    0,    0,    3,
   94,    4,    5,    6,    7,  188,   96,   97,   98,   99,
    0,   94,    0,   95,   95,   95,  139,   96,   97,   98,
   99,  100,  101,    0,  108,   93,    0,    0,    0,  109,
    0,   95,  100,  101,  104,    0,  102,    1,  105,  106,
  109,  107,  224,    0,    0,  104,    0,  102,    2,  246,
  106,    3,  107,    4,    5,    6,    7,    8,  109,    0,
    0,    0,    0,  104,   95,  102,    0,  310,  106,  109,
  107,    0,    0,    0,  104,    0,  102,   94,  105,  106,
    0,  107,  139,   96,   97,   98,   99,  223,    0,    0,
    0,    0,    0,    1,    0,   45,  109,    0,  100,  101,
  245,  104,    0,  102,    2,  360,  106,    3,  107,    4,
    5,    6,    7,    8,   45,    0,   45,   45,  309,  140,
   45,    0,  108,    0,    0,  109,    0,    0,    0,  354,
  104,    0,  102,  108,  105,  106,  109,  107,    0,    0,
   45,  104,    0,  102,    0,  105,  106,    0,  107,   59,
    0,  108,    0,    0,  109,    0,  359,    0,    0,  104,
    0,  102,  108,  105,  106,    0,  107,    0,    0,    0,
  152,   94,   44,   45,    0,    0,  139,   96,   97,   98,
   99,    0,    0,    0,    0,  390,    0,    0,    0,  108,
  109,    0,  100,  101,    0,  104,    0,  102,    0,  105,
  106,  109,  107,    1,    0,    0,  104,    0,  102,    0,
  105,  106,    0,  107,    2,    0,  176,    3,  108,    4,
    5,    6,    7,    8,    0,    0,  140,  326,  109,  108,
    0,    0,    0,  104,    0,  102,    0,  105,  106,  109,
  107,   75,   75,   75,  104,   75,  102,  108,  105,  106,
    0,  107,    0,   45,  329,    0,   45,    0,  109,    0,
   75,    0,    0,  104,    0,  102,    0,  105,  106,   94,
  107,    0,    0,    0,  139,   96,   97,   98,   99,  244,
   94,   44,    0,  108,  368,  139,   96,   97,   98,   99,
  100,  101,   75,    0,  108,    0,    0,  308,   94,   44,
    0,  100,  101,  139,   96,   97,   98,   99,  353,   94,
   44,    0,    0,    0,  139,   96,   97,   98,   99,  100,
  101,  108,    0,    0,    0,    0,    0,    0,    0,  337,
  100,  101,  108,    0,    0,  358,   94,   44,    0,    0,
    0,  139,   96,   97,   98,   99,    0,    0,    0,    0,
    0,  108,    0,  230,  305,   28,    0,  100,  101,    0,
    0,    0,    0,    0,  389,   94,   44,    0,    0,    0,
  139,   96,   97,   98,   99,    0,   94,    0,    0,    0,
    0,  139,   96,   97,   98,   99,  100,  101,    0,    0,
    0,    0,    0,    0,   94,   44,    0,  100,  101,  139,
   96,   97,   98,   99,  231,  171,  143,  171,    0,  143,
    0,    0,    0,    0,    0,  100,  101,  109,    0,    0,
    0,    0,  104,    0,  102,  370,  105,  106,    0,  107,
   94,    0,    0,    0,    0,  139,   96,   97,   98,   99,
    0,   94,    0,    0,    0,    0,  139,   96,   97,   98,
   99,  100,  101,    0,    0,    0,  171,    0,    0,    0,
    0,    0,  100,  101,    0,    0,    0,    0,   94,    0,
    0,    0,    0,  139,   96,   97,   98,   99,    0,   94,
    0,    0,    0,    0,  139,   96,   97,   98,   99,  100,
  101,    0,    0,    0,    0,    0,    0,    0,   94,    0,
  100,  101,    0,  139,   96,   97,   98,   99,    0,    0,
  108,    0,    0,    0,    0,    0,  109,    0,    0,  100,
  101,  104,    0,  102,  394,  105,  106,  109,  107,    0,
    0,    0,  104,    0,  102,  396,  105,  106,    0,  107,
    0,    0,    0,    0,    0,  109,    0,    0,    0,    0,
  104,    0,  102,  401,  105,  106,  109,  107,    0,    0,
    0,  104,    0,  102,  418,  105,  106,    0,  107,    0,
    0,    1,    0,    0,  109,    0,    0,    0,    0,  104,
    0,  102,    2,  105,  106,    3,  107,    4,    5,    6,
    7,  304,  109,    0,    0,    0,    0,  104,    0,  182,
    0,  105,  106,  109,  107,    0,    0,    0,  104,  108,
  185,    0,  105,  106,    0,  107,    0,    0,    0,    0,
  108,   25,    0,  171,    0,    0,   25,    0,   25,    0,
   25,   25,    0,   25,  171,    0,    0,  171,  108,  171,
  171,  171,  171,  171,    0,    0,    0,    0,    0,  108,
    0,    0,    0,    0,    0,   50,    0,   94,   50,    0,
    0,   50,  139,   96,   97,   98,   99,  108,    0,    0,
    0,    0,    0,    0,    0,   50,   50,    0,  100,  101,
   50,    0,    0,    1,    1,  108,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    0,  108,   51,    0,    0,
   51,    0,    0,   51,    0,    1,    1,    0,    1,    1,
   50,   50,    0,    0,   25,    0,    0,   51,   51,    0,
    0,    0,   51,    0,    0,    1,    1,    0,    1,    0,
    1,    1,    1,    1,    1,    1,    0,    1,    0,    0,
    1,   50,   50,    0,    0,    0,    0,    1,    1,    0,
    1,    1,   51,   51,    0,    0,   94,    0,    0,    0,
    0,  139,   96,   97,   98,   99,    0,   94,    0,    0,
    1,    0,  139,   96,   97,   98,   99,  100,  101,    1,
    0,    0,    1,   51,   51,   94,    0,    0,  100,  101,
  139,   96,   97,   98,   99,    0,   94,    0,    0,    0,
    0,  139,   96,   97,   98,   99,  100,  101,    0,    0,
    0,    0,    1,    0,   94,    0,    0,  100,  101,  139,
   96,   97,   98,   99,    0,    0,    0,    0,    0,    0,
    0,    0,   94,    0,    0,  100,  101,  139,   96,   97,
   98,   99,    0,   94,    0,    0,    0,    0,  139,   96,
   97,   98,   99,  100,  101,    0,    0,    0,    0,    0,
    0,   25,    0,    0,  100,  101,   25,   25,   25,   25,
   25,    1,    1,    0,    1,    0,    1,    1,    1,    1,
    1,    1,   25,   25,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    1,    0,    1,    1,    0,    0,
    0,    0,   50,   50,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  171,    0,    0,  171,    0,
  171,  171,  171,  171,  171,    1,    0,    0,    1,    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    0,   51,   51,  171,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  171,    1,    0,
  171,    0,  171,  171,  171,  171,  171,    0,    0,    0,
    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,   18,   18,    0,    0,   18,   18,
   18,   18,   18,    0,   18,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   18,   18,   18,    0,   18,
   18,   23,   23,    0,    0,   23,   23,   23,   23,   23,
    0,   23,    0,    0,   36,    0,    0,   36,    0,   36,
   36,   36,   23,   23,   23,    0,   23,   23,    0,    0,
   18,   18,    0,    0,   36,   36,   36,    0,   36,   36,
    0,    0,   30,   30,    0,    0,   30,   30,   30,   30,
   30,    0,   30,    0,    0,    0,    0,   23,   23,    0,
    0,   18,   18,   30,   30,   30,    0,   30,   30,   36,
   36,   37,    0,    0,   37,    0,   37,   37,   37,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   23,   23,
    0,   37,   37,   37,    0,   37,   37,    0,   30,   30,
   36,   36,    0,   55,    0,    0,   55,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   55,   55,    0,    0,    0,   55,   37,   37,   38,   30,
   30,   38,    0,   38,   38,   38,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,   38,
   38,   52,   38,   38,   52,   55,   40,   37,   37,   40,
    0,    0,   40,    0,    0,    0,    0,    0,   52,   52,
    0,    0,    0,   52,    0,    0,   40,   40,   40,    0,
   40,   40,    0,   38,   38,   41,   55,   55,   41,    0,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   52,   52,   41,   41,   41,    0,   41,
   41,   40,   40,    0,   38,   38,    0,    0,    0,    0,
    0,   18,   18,   18,   18,   18,   18,   18,   18,   18,
    0,    0,    0,    0,   52,   52,    0,    0,    0,    0,
   41,   41,   40,   40,    0,    0,    0,    0,   23,   23,
   23,   23,   23,   23,   23,   23,   23,    0,    0,    0,
    0,   36,   36,   36,   36,   36,   36,   36,   36,    0,
    0,   41,   41,    0,    0,    0,    0,    0,   42,    0,
    0,   42,    0,    0,   42,    0,    0,    0,    0,    0,
   30,   30,   30,   30,   30,   30,   30,   30,   42,   42,
   42,    0,   42,   42,    0,    0,   45,    0,    0,   45,
    0,    0,   45,    0,    0,    0,    0,    0,   37,   37,
   37,   37,   37,   37,   37,   37,   45,   45,   45,   46,
   45,   45,   46,   42,   42,   46,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,   55,   46,
   46,   46,    0,   46,   46,    0,    0,    0,    0,    0,
    0,   45,   45,    0,   42,   42,   43,    0,    0,   43,
    0,    0,   43,    0,    0,   38,   38,   38,   38,   38,
   38,   38,   38,    0,   46,   46,   43,   43,   43,    0,
   43,   43,   45,   45,    0,   52,   52,    0,    0,    0,
    0,    0,    0,   40,   40,   40,   40,   40,   40,   40,
   40,    0,    0,    0,    0,   46,   46,    0,    0,    0,
   44,   43,   43,   44,    0,    0,   44,    0,  268,  305,
   28,    0,   41,   41,   41,   41,   41,   41,   41,   41,
   44,   44,   44,    0,   44,   44,    0,    0,   47,    0,
    0,   47,   43,   43,   47,    0,    0,   48,    0,    0,
   48,    0,    0,   48,   49,    0,    0,   49,   47,   47,
   49,    0,    0,   47,    0,   44,   44,   48,   48,  231,
   53,    0,   48,   53,   49,   49,    0,    0,    0,   49,
    0,    0,    0,    0,    0,    0,    0,   53,   53,    0,
    0,    0,   53,   47,   47,    0,   44,   44,    0,    0,
    0,    0,   48,   48,  116,  116,  171,    0,  171,   49,
   49,    0,    0,    0,    0,   42,   42,   42,   42,   42,
   42,    0,   53,   53,   47,   47,    0,    0,    0,    0,
    0,    0,  114,   48,   48,  114,    0,    0,    0,   57,
   49,   49,   57,   45,   45,   45,   45,   45,   45,  114,
  114,    0,  114,   53,   53,  116,   57,   57,  106,  106,
  106,   57,  106,    0,    0,    0,   46,   46,   46,   46,
   46,   46,    0,    0,    0,    0,  106,  106,    0,   89,
   89,   89,    0,   89,    0,    0,    0,    0,    0,    0,
    0,   57,    0,  115,    0,    0,  115,   89,   89,    0,
    0,    1,    0,   43,   43,   43,   43,   43,   43,  106,
  115,  115,    2,  115,  114,    3,    0,    4,    5,    6,
    7,    8,    0,   57,    0,    0,  317,    0,    0,    0,
   89,    0,    0,    0,    0,    0,    1,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
    3,    0,    4,    5,    6,    7,    8,   44,   44,   44,
   44,   44,   44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  115,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,   47,   47,   47,    0,
    0,    0,    0,    0,   48,   48,   48,   48,    0,    0,
    0,   49,   49,   49,   49,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,   53,    0,    0,    0,    0,
    0,    0,  171,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  171,    0,    0,  171,    0,  171,  171,
  171,  171,  171,    0,    0,    0,    0,    0,    0,  114,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  114,    0,    0,  114,    0,  114,  114,  114,  114,  114,
    0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
    0,    0,    0,   57,   57,    0,    0,  106,    0,    0,
  106,    0,  106,  106,  106,  106,  106,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
  115,   89,    0,   89,   89,   89,   89,   89,    0,    0,
    0,  115,    0,    0,  115,    0,  115,  115,  115,  115,
  115,
};
static const short yycheck[] = {                         28,
   57,    0,   57,   40,   68,    4,   83,   42,   63,   73,
    9,   63,   62,   12,   13,   14,  123,   34,   44,   40,
   40,  125,   28,   63,   53,   46,   89,  125,   92,   67,
   44,   11,   44,   40,   63,   42,   44,  123,   40,  102,
   42,  123,   40,   41,  116,   40,   44,   53,  300,   40,
   41,  278,   59,   44,   91,   40,   58,   42,   40,   40,
   42,   42,  233,   62,  123,   44,   41,   44,   48,   44,
   91,   60,   41,   62,   54,   40,  125,   45,   40,   59,
   46,   49,   59,   58,   59,  140,   73,   44,   63,  147,
   43,   46,   45,   91,   61,   61,   91,  152,  269,  125,
   91,  156,  166,   61,  181,   92,   91,  184,  171,  172,
   91,  125,  152,  125,   69,  178,  179,  125,   93,  182,
  158,   41,  185,  152,   44,   91,   91,  156,   58,   91,
  202,  203,  204,  191,  102,  198,   93,  192,   58,   59,
   32,  147,  197,   63,   44,  200,  125,   44,   41,  124,
  125,   44,   41,  405,   40,   44,   33,  220,   58,  223,
   40,   38,   59,   40,   59,   42,   43,  147,   45,   61,
  227,  278,  227,   93,  278,  252,  231,   59,   44,  166,
  278,  278,   59,   44,  261,  191,  241,  167,   44,  244,
  253,  231,  255,   59,   44,  267,  278,   32,   59,  291,
  292,   33,  231,   59,   44,  125,   38,   44,   40,   59,
   42,   43,  241,   45,  182,   41,  233,  185,   44,   59,
  269,   56,   59,  125,  230,  274,   61,  276,  277,  278,
   40,  230,   58,   59,  286,   44,  223,   63,   40,  274,
  239,  278,   37,  300,   44,  300,  123,   42,  125,  126,
   59,   58,   47,  308,  331,  332,  333,  312,  278,   59,
  315,  324,  268,  326,  314,  328,  329,   93,  308,  268,
   58,  278,  293,  294,  295,  315,  278,   38,  342,  308,
  278,   41,  337,  312,   44,  340,  315,  278,  284,  346,
   94,  346,  285,  370,  126,  350,  278,  278,  353,  125,
  289,  290,  137,  358,  367,  368,  124,  362,   41,  372,
  285,  286,   44,  287,  288,  314,  393,  394,  358,  396,
   93,  350,   41,  400,  401,   44,  403,   41,   93,  358,
  261,  386,   68,  362,  389,  398,  171,   73,  415,   59,
  417,  418,   33,   41,   41,  422,   44,   38,  405,   40,
  405,   42,   43,  430,   45,   58,   92,  386,   94,   40,
   41,   42,  278,   44,  100,  101,  286,  269,   59,  278,
   41,  278,  274,   44,  276,  277,  278,  278,   59,   40,
  116,  258,  259,  260,  261,  262,  263,  264,  265,  266,
   41,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  209,  210,  211,  212,
   91,   93,   41,   41,   33,   44,   44,  294,  295,   38,
  269,   40,  123,   42,   43,  274,   45,  276,  277,  278,
  166,   93,  123,   38,  125,  126,   41,  269,   93,   44,
   59,  273,  274,   41,  276,  277,  278,  279,  280,  281,
  282,  205,  206,   58,   59,   60,   93,   62,   63,  285,
  286,   41,  294,  295,   44,   41,  202,  203,  204,  205,
  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
  216,  217,  218,  219,  207,  208,   41,  223,   93,   94,
   41,   93,   40,   41,   42,   41,   44,   93,   40,   41,
   42,   93,   44,   33,  123,   93,  125,  126,   38,   93,
   40,   59,   42,   43,   93,   45,  267,   59,   41,  124,
  125,   44,   41,   41,   41,   44,   44,   44,   93,   59,
   33,  267,   93,   41,   93,   38,   44,   40,   41,   42,
   43,   33,   45,   91,  258,   59,   38,   41,   40,   91,
   42,   43,   93,   45,   46,  269,   59,   93,  272,   93,
  274,  275,  276,  277,  278,  213,  214,  258,  259,  260,
  261,  262,  263,  264,  265,  266,   41,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,   41,  123,   41,   44,  126,   44,   41,   91,
   93,   44,   93,  294,  295,  182,  342,   33,  185,   41,
   61,  337,   38,  216,   40,  215,   42,   43,   41,   45,
   46,   44,  217,  126,  218,   54,  219,   43,  167,   38,
  239,  123,  137,  125,  126,   58,   59,  228,    9,  258,
  259,  260,  261,  262,  263,  264,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,   -1,   91,   -1,   -1,   -1,   -1,
   93,   -1,  123,   -1,   41,  294,  295,   44,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,  292,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,  123,   -1,  125,
  126,   33,  125,  258,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  269,   -1,   -1,  272,   -1,  274,
  275,  276,  277,  278,   -1,   -1,   93,   -1,  123,  259,
  260,  261,  262,  263,  264,  265,  266,   -1,  268,   -1,
  270,  271,   -1,  273,   40,   41,   42,   -1,  278,  279,
  280,  281,  282,   -1,   -1,  258,   -1,   -1,  125,   -1,
   -1,   93,   58,   -1,  294,  295,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,  273,   -1,   40,   41,   42,  278,  279,  280,  281,
  282,  294,  295,   -1,  126,   91,   -1,   -1,   -1,   33,
   -1,   58,  294,  295,   38,   -1,   40,  258,   42,   43,
   33,   45,   46,   -1,   -1,   38,   -1,   40,  269,   42,
   43,  272,   45,  274,  275,  276,  277,  278,   33,   -1,
   -1,   -1,   -1,   38,   91,   40,   -1,   42,   43,   33,
   45,   -1,   -1,   -1,   38,   -1,   40,  273,   42,   43,
   -1,   45,  278,  279,  280,  281,  282,   91,   -1,   -1,
   -1,   -1,   -1,  258,   -1,   24,   33,   -1,  294,  295,
   93,   38,   -1,   40,  269,   42,   43,  272,   45,  274,
  275,  276,  277,  278,   43,   -1,   45,   46,   93,  123,
   49,   -1,  126,   -1,   -1,   33,   -1,   -1,   -1,   93,
   38,   -1,   40,  126,   42,   43,   33,   45,   -1,   -1,
   69,   38,   -1,   40,   -1,   42,   43,   -1,   45,  286,
   -1,  126,   -1,   -1,   33,   -1,   93,   -1,   -1,   38,
   -1,   40,  126,   42,   43,   -1,   45,   -1,   -1,   -1,
  272,  273,  274,  102,   -1,   -1,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,  126,
   33,   -1,  294,  295,   -1,   38,   -1,   40,   -1,   42,
   43,   33,   45,  258,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  269,   -1,   59,  272,  126,  274,
  275,  276,  277,  278,   -1,   -1,  123,   59,   33,  126,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   33,
   45,   40,   41,   42,   38,   44,   40,  126,   42,   43,
   -1,   45,   -1,  182,   59,   -1,  185,   -1,   33,   -1,
   59,   -1,   -1,   38,   -1,   40,   -1,   42,   43,  273,
   45,   -1,   -1,   -1,  278,  279,  280,  281,  282,  272,
  273,  274,   -1,  126,   59,  278,  279,  280,  281,  282,
  294,  295,   91,   -1,  126,   -1,   -1,  272,  273,  274,
   -1,  294,  295,  278,  279,  280,  281,  282,  272,  273,
  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,  294,
  295,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  294,  295,  126,   -1,   -1,  272,  273,  274,   -1,   -1,
   -1,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   40,   41,   42,   -1,  294,  295,   -1,
   -1,   -1,   -1,   -1,  272,  273,  274,   -1,   -1,   -1,
  278,  279,  280,  281,  282,   -1,  273,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  294,  295,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,  294,  295,  278,
  279,  280,  281,  282,   91,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,   -1,   -1,  294,  295,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,
  273,   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,
   -1,  273,   -1,   -1,   -1,   -1,  278,  279,  280,  281,
  282,  294,  295,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,   -1,   -1,  273,   -1,
   -1,   -1,   -1,  278,  279,  280,  281,  282,   -1,  273,
   -1,   -1,   -1,   -1,  278,  279,  280,  281,  282,  294,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,   -1,
  294,  295,   -1,  278,  279,  280,  281,  282,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  294,
  295,   38,   -1,   40,   41,   42,   43,   33,   45,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   33,   45,   -1,   -1,
   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,   -1,
   -1,  258,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  269,   42,   43,  272,   45,  274,  275,  276,
  277,  278,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   33,   45,   -1,   -1,   -1,   38,  126,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
  126,   33,   -1,  258,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  269,   -1,   -1,  272,  126,  274,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   38,   -1,  273,   41,   -1,
   -1,   44,  278,  279,  280,  281,  282,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,  294,  295,
   63,   -1,   -1,   37,   38,  126,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,  126,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   59,   60,   -1,   62,   63,
   93,   94,   -1,   -1,  126,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,   46,   47,   -1,   91,   -1,   -1,
   94,  124,  125,   -1,   -1,   -1,   -1,   59,   60,   -1,
   62,   63,   93,   94,   -1,   -1,  273,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,   -1,  273,   -1,   -1,
  124,   -1,  278,  279,  280,  281,  282,  294,  295,   91,
   -1,   -1,   94,  124,  125,  273,   -1,   -1,  294,  295,
  278,  279,  280,  281,  282,   -1,  273,   -1,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  294,  295,   -1,   -1,
   -1,   -1,  124,   -1,  273,   -1,   -1,  294,  295,  278,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  294,  295,  278,  279,  280,
  281,  282,   -1,  273,   -1,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  294,  295,   -1,   -1,   -1,   -1,   -1,
   -1,  273,   -1,   -1,  294,  295,  278,  279,  280,  281,
  282,   37,   38,   -1,   40,   -1,   42,   43,   44,   45,
   46,   47,  294,  295,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,  285,  286,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  269,   -1,   -1,  272,   -1,
  274,  275,  276,  277,  278,   91,   -1,   -1,   94,   -1,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,   -1,   -1,  285,  286,  258,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  124,   -1,
  272,   -1,  274,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,   -1,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   38,   -1,   -1,   41,   -1,   43,
   44,   45,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   93,   94,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,  124,  125,   58,   59,   60,   -1,   62,   63,   93,
   94,   38,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   93,   94,
  124,  125,   -1,   41,   -1,   -1,   44,   -1,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
   58,   59,   -1,   -1,   -1,   63,   93,   94,   38,  124,
  125,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   41,   62,   63,   44,   93,   38,  124,  125,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   58,   59,   60,   -1,
   62,   63,   -1,   93,   94,   38,  124,  125,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   58,   59,   60,   -1,   62,
   63,   93,   94,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,  284,  285,  286,  287,  288,  289,  290,  291,  292,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   93,   94,  124,  125,   -1,   -1,   -1,   -1,  284,  285,
  286,  287,  288,  289,  290,  291,  292,   -1,   -1,   -1,
   -1,  285,  286,  287,  288,  289,  290,  291,  292,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,  292,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  285,  286,
  287,  288,  289,  290,  291,  292,   58,   59,   60,   38,
   62,   63,   41,   93,   94,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,   58,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,  124,  125,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,   -1,   93,   94,   58,   59,   60,   -1,
   62,   63,  124,  125,   -1,  285,  286,   -1,   -1,   -1,
   -1,   -1,   -1,  285,  286,  287,  288,  289,  290,  291,
  292,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   38,   93,   94,   41,   -1,   -1,   44,   -1,   40,   41,
   42,   -1,  285,  286,  287,  288,  289,  290,  291,  292,
   58,   59,   60,   -1,   62,   63,   -1,   -1,   38,   -1,
   -1,   41,  124,  125,   44,   -1,   -1,   38,   -1,   -1,
   41,   -1,   -1,   44,   38,   -1,   -1,   41,   58,   59,
   44,   -1,   -1,   63,   -1,   93,   94,   58,   59,   91,
   41,   -1,   63,   44,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   93,   94,   -1,  124,  125,   -1,   -1,
   -1,   -1,   93,   94,   40,   41,   42,   -1,   44,   93,
   94,   -1,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,   -1,   93,   94,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   41,  124,  125,   44,   -1,   -1,   -1,   41,
  124,  125,   44,  285,  286,  287,  288,  289,  290,   58,
   59,   -1,   61,  124,  125,   91,   58,   59,   40,   41,
   42,   63,   44,   -1,   -1,   -1,  285,  286,  287,  288,
  289,  290,   -1,   -1,   -1,   -1,   58,   59,   -1,   40,
   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   41,   -1,   -1,   44,   58,   59,   -1,
   -1,  258,   -1,  285,  286,  287,  288,  289,  290,   91,
   58,   59,  269,   61,  123,  272,   -1,  274,  275,  276,
  277,  278,   -1,  125,   -1,   -1,  283,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,  258,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,   -1,   -1,
  272,   -1,  274,  275,  276,  277,  278,  285,  286,  287,
  288,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,  285,  286,  287,  288,   -1,   -1,
   -1,  285,  286,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,  286,   -1,   -1,   -1,   -1,
   -1,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,   -1,   -1,  272,   -1,  274,  275,
  276,  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  269,   -1,   -1,  272,   -1,  274,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,   -1,   -1,
   -1,   -1,   -1,  285,  286,   -1,   -1,  269,   -1,   -1,
  272,   -1,  274,  275,  276,  277,  278,  258,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,   -1,
  258,  272,   -1,  274,  275,  276,  277,  278,   -1,   -1,
   -1,  269,   -1,   -1,  272,   -1,  274,  275,  276,  277,
  278,
};
#define YYFINAL 9
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 295
#if YYDEBUG
static const char *yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"SPECIAL",
"INLINE","DO","FOR","WHILE","BREAK","CONTINUE","GOTO","RETURN","IF","ELSE",
"SWITCH","ENUM","CASE","DEFAULT","STATIC","SIZEOF","type_qualifier",
"storage_class_specifier","type_specifier","struct_or_union","identifier",
"const_int","const_char","const_float","string_literal","ellipsis","op_assign",
"op_and","op_or","op_eq","op_ne","op_le","op_ge","op_lshift","op_rshift",
"op_ptr","op_pp","op_dd",
};
static const char *yyrule[] = {
"$accept : translation_unit",
"primary_expr : identifier",
"primary_expr : const_int",
"primary_expr : const_char",
"primary_expr : const_float",
"primary_expr : string_literal",
"primary_expr : '(' expr ')'",
"postfix_expr : primary_expr",
"postfix_expr : postfix_expr '[' expr ']'",
"postfix_expr : postfix_expr '(' argument_expr_list ')'",
"postfix_expr : postfix_expr '.' identifier",
"postfix_expr : postfix_expr op_ptr identifier",
"postfix_expr : postfix_expr op_pp",
"postfix_expr : postfix_expr op_dd",
"postfix_expr : '(' type_name ')' '{' init_list '}'",
"postfix_expr : '(' type_name ')' '{' init_list ',' '}'",
"argument_expr_list : assignment_expr",
"argument_expr_list : argument_expr_list ',' assignment_expr",
"unary_expr : postfix_expr",
"unary_expr : op_pp unary_expr",
"unary_expr : op_dd unary_expr",
"unary_expr : op_unary cast_expr",
"unary_expr : SIZEOF unary_expr",
"unary_expr : SIZEOF '(' type_name ')'",
"op_unary : '&'",
"op_unary : '*'",
"op_unary : '+'",
"op_unary : '-'",
"op_unary : '~'",
"op_unary : '!'",
"cast_expr : unary_expr",
"cast_expr : '(' type_name ')' cast_expr",
"multiplicative_expr : cast_expr",
"multiplicative_expr : multiplicative_expr '*' cast_expr",
"multiplicative_expr : multiplicative_expr '/' cast_expr",
"multiplicative_expr : multiplicative_expr '%' cast_expr",
"additive_expr : multiplicative_expr",
"additive_expr : additive_expr '+' multiplicative_expr",
"additive_expr : additive_expr '-' multiplicative_expr",
"shift_expr : additive_expr",
"shift_expr : shift_expr op_lshift additive_expr",
"shift_expr : shift_expr op_rshift additive_expr",
"relational_expr : shift_expr",
"relational_expr : relational_expr '<' shift_expr",
"relational_expr : relational_expr '>' shift_expr",
"relational_expr : relational_expr op_le shift_expr",
"relational_expr : relational_expr op_ge shift_expr",
"equality_expr : relational_expr",
"equality_expr : equality_expr op_eq relational_expr",
"equality_expr : equality_expr op_ne relational_expr",
"AND_expr : equality_expr",
"AND_expr : AND_expr '&' equality_expr",
"ex_OR_expr : AND_expr",
"ex_OR_expr : ex_OR_expr '^' AND_expr",
"in_OR_expr : ex_OR_expr",
"in_OR_expr : in_OR_expr '|' ex_OR_expr",
"logical_AND_expr : in_OR_expr",
"logical_AND_expr : logical_AND_expr op_and in_OR_expr",
"logical_OR_expr : logical_AND_expr",
"logical_OR_expr : logical_OR_expr op_or logical_AND_expr",
"conditional_expr : logical_OR_expr",
"conditional_expr : logical_OR_expr '?' expr ':' conditional_expr",
"assignment_expr : conditional_expr",
"assignment_expr : unary_expr op_assign assignment_expr",
"expr : assignment_expr",
"expr : expr ',' assignment_expr",
"constant_expr : conditional_expr",
"declaration : declaration_spec ';'",
"declaration : declaration_spec init_declarator_list ';'",
"declaration_spec : storage_class_spec",
"declaration_spec : storage_class_spec declaration_spec",
"declaration_spec : type_spec",
"declaration_spec : type_spec declaration_spec",
"declaration_spec : type_qualifier",
"declaration_spec : type_qualifier declaration_spec",
"declaration_spec : func_spec",
"declaration_spec : func_spec declaration_spec",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"storage_class_spec : STATIC",
"storage_class_spec : storage_class_specifier",
"type_spec : type_specifier",
"type_spec : struct_or_union_spec",
"type_spec : enum_spec",
"type_spec : typedef_name",
"struct_or_union_spec : struct_or_union '{' struct_declaration_list '}'",
"struct_or_union_spec : struct_or_union identifier '{' struct_declaration_list '}'",
"struct_or_union_spec : struct_or_union identifier",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : spec_qual_list struct_declarator_list ';'",
"spec_qual_list : type_spec",
"spec_qual_list : type_spec spec_qual_list",
"spec_qual_list : type_qual",
"spec_qual_list : type_qual spec_qual_list",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list ',' struct_declarator",
"struct_declarator : declarator",
"struct_declarator : ':' constant_expr",
"struct_declarator : declarator ':' constant_expr",
"enum_spec : ENUM '{' enum_list '}'",
"enum_spec : ENUM identifier '{' enum_list '}'",
"enum_spec : ENUM '{' enum_list ',' '}'",
"enum_spec : ENUM identifier '{' enum_list ',' '}'",
"enum_spec : ENUM identifier",
"enum_list : enumerator",
"enum_list : enum_list ',' enumerator",
"enumerator : enum_constant",
"enumerator : enum_constant '=' constant_expr",
"enum_constant : identifier",
"type_qual : type_qualifier",
"func_spec : INLINE",
"declarator : direct_declarator",
"declarator : pointer direct_declarator",
"direct_declarator : identifier",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '[' type_qual_list ']'",
"direct_declarator : direct_declarator '[' assignment_expr ']'",
"direct_declarator : direct_declarator '[' type_qual_list assignment_expr ']'",
"direct_declarator : direct_declarator '[' STATIC assignment_expr ']'",
"direct_declarator : direct_declarator '[' STATIC type_qual_list assignment_expr ']'",
"direct_declarator : direct_declarator '[' type_qual_list STATIC assignment_expr ']'",
"direct_declarator : direct_declarator '[' '*' ']'",
"direct_declarator : direct_declarator '[' type_qual_list '*' ']'",
"direct_declarator : direct_declarator '(' para_type_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"pointer : '*'",
"pointer : '*' type_qual_list",
"pointer : '*' pointer",
"pointer : '*' type_qual_list pointer",
"type_qual_list : type_qual",
"type_qual_list : type_qual_list type_qual",
"para_type_list : para_list",
"para_type_list : para_list ',' ellipsis",
"para_list : para_declaration",
"para_list : para_list ',' para_declaration",
"para_declaration : declaration_spec declarator",
"para_declaration : declaration_spec",
"para_declaration : declaration_spec abstract_declarator",
"identifier_list : identifier",
"identifier_list : identifier_list ',' identifier",
"type_name : spec_qual_list",
"type_name : spec_qual_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : '(' abstract_declarator ')'",
"direct_abstract_declarator : '[' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' ']'",
"direct_abstract_declarator : '[' type_qual_list ']'",
"direct_abstract_declarator : '[' assignment_expr ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' type_qual_list ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' assignment_expr ']'",
"direct_abstract_declarator : '[' type_qual_list assignment_expr ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' type_qual_list assignment_expr ']'",
"direct_abstract_declarator : '[' STATIC assignment_expr ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' STATIC assignment_expr ']'",
"direct_abstract_declarator : '[' STATIC type_qual_list assignment_expr ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' STATIC type_qual_list assignment_expr ']'",
"direct_abstract_declarator : '[' type_qual_list STATIC assignment_expr ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' type_qual_list STATIC assignment_expr ']'",
"direct_abstract_declarator : '[' '*' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' '*' ']'",
"direct_abstract_declarator : '(' ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' ')'",
"direct_abstract_declarator : '(' para_type_list ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' para_type_list ')'",
"typedef_name : identifier",
"initializer : assignment_expr",
"initializer : '{' init_list '}'",
"initializer : '{' init_list ',' '}'",
"init_list : initializer",
"init_list : designation initializer",
"init_list : init_list ',' initializer",
"init_list : init_list ',' designation initializer",
"designation : designator_list '='",
"designator_list : designator",
"designator_list : designator_list designator",
"designator : '[' constant_expr ']'",
"designator : '.' identifier",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expr_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : identifier ':' statement",
"labeled_statement : CASE constant_expr ':' statement",
"labeled_statement : DEFAULT ':' statement",
"compound_statement : '{' '}'",
"compound_statement : '{' block_item_list '}'",
"block_item_list : block_item",
"block_item_list : block_item_list block_item",
"block_item : declaration",
"block_item : statement",
"expr_statement : ';'",
"expr_statement : expr ';'",
"selection_statement : IF '(' expr ')' statement",
"selection_statement : IF '(' expr ')' statement ELSE statement",
"selection_statement : SWITCH '(' expr ')' statement",
"iteration_statement : WHILE '(' expr ')' statement",
"iteration_statement : DO statement WHILE '(' expr ')' ';'",
"iteration_statement : FOR '(' ')' statement",
"iteration_statement : FOR '(' expr ';' ';' ')' statement",
"iteration_statement : FOR '(' ';' expr ';' ')' statement",
"iteration_statement : FOR '(' ';' ';' expr ')' statement",
"iteration_statement : FOR '(' expr ';' expr ';' ')' statement",
"iteration_statement : FOR '(' expr ';' ';' expr ')' statement",
"iteration_statement : FOR '(' ';' expr ';' expr ')' statement",
"iteration_statement : FOR '(' expr ';' expr ';' expr ')' statement",
"iteration_statement : FOR '(' declaration ';' ')' statement",
"iteration_statement : FOR '(' declaration expr ';' ')' statement",
"iteration_statement : FOR '(' declaration ';' expr ')' statement",
"iteration_statement : FOR '(' declaration expr ';' expr ')' statement",
"jump_statement : GOTO identifier ';'",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expr ';'",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : func_definition",
"external_declaration : declaration",
"func_definition : declaration_spec declarator compound_statement",
"func_definition : declaration_spec declarator declaration_list compound_statement",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  500
#endif
#endif

#define YYINITSTACKSIZE 500

typedef struct {
    unsigned stacksize;
    short    *s_base;
    short    *s_mark;
    short    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 144 "scanner.y"

#pragma comment(lib,"yl.lib")
extern FILE * yyin;
void yyerror(char* s) {
	printf("Line %d: %s %s",linenum,s,yytext);
	//printf("%s\n",s);
}
int main(void)
{
	yyin=stdin;
	printf("Test\n");
	yyparse();
	return 0;
}
#line 1149 "y.tab.c"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (short *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack)) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;
yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }

    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }

    printf("Internal\n");
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
	
    printf("Internal1\n");
    if (yyerrflag) goto yyinrecovery;
    printf("Internal2\n");

    yyerror("syntax error");

    printf("Internal3\n");

    goto yyerrlab;
    
yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (short) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}
